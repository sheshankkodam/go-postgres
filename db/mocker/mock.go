// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sheshankkodam/MyPostgres/db (interfaces: PostgresOperations)

// Package mocker is a generated GoMock package.
package mocker

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostgresOperations is a mock of PostgresOperations interface
type MockPostgresOperations struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresOperationsMockRecorder
}

// MockPostgresOperationsMockRecorder is the mock recorder for MockPostgresOperations
type MockPostgresOperationsMockRecorder struct {
	mock *MockPostgresOperations
}

// NewMockPostgresOperations creates a new mock instance
func NewMockPostgresOperations(ctrl *gomock.Controller) *MockPostgresOperations {
	mock := &MockPostgresOperations{ctrl: ctrl}
	mock.recorder = &MockPostgresOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostgresOperations) EXPECT() *MockPostgresOperationsMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockPostgresOperations) Insert(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockPostgresOperationsMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPostgresOperations)(nil).Insert), arg0, arg1, arg2)
}
